"""
–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é
"""

import pandas as pd
import numpy as np
from datetime import datetime
import os
import sys

from data_loader import DataLoader
from pricing_algorithm import PricingAlgorithm
from config import (
    DATA_FOLDER, OUTPUT_FOLDER, BACKUP_FOLDER,
    LOOKBACK_WEEKS, CURRENT_WEEK_DAYS,
    DATE_FORMAT
)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"""
    print("=" * 60)
    print("–ê–ù–ê–õ–ò–ó –ê–†–ë–ò–¢–†–ê–ñ–ê - –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–æ–∫
    for folder in [DATA_FOLDER, OUTPUT_FOLDER, BACKUP_FOLDER]:
        if not os.path.exists(folder):
            os.makedirs(folder)
            print(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {folder}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    loader = DataLoader()
    algorithm = PricingAlgorithm()
    
    try:
        # –ü–æ–∏—Å–∫ CSV —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ data
        csv_files = [f for f in os.listdir(DATA_FOLDER) if f.endswith('.csv')]
        if not csv_files:
            print(f"‚ùå –í –ø–∞–ø–∫–µ {DATA_FOLDER} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ CSV —Ñ–∞–π–ª–æ–≤!")
            print("–ü–æ–º–µ—Å—Ç–∏—Ç–µ –≤–∞—à–∏ CSV —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É data/ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞.")
            return
        
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ CSV —Ñ–∞–π–ª–æ–≤: {len(csv_files)}")
        for file in csv_files:
            print(f"   - {file}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã–π CSV —Ñ–∞–π–ª (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤)
        main_file = csv_files[0]
        print(f"\nüìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ {main_file}...")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        df = loader.load_csv(main_file)
        df = loader.prepare_data()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –¥–∞–Ω–Ω—ã–º
        summary = loader.get_data_summary()
        print(f"\nüìà –°–í–û–î–ö–ê –ü–û –î–ê–ù–ù–´–ú:")
        print(f"   –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {summary['total_rows']:,}")
        print(f"   –ü–µ—Ä–∏–æ–¥: {summary['date_range'][0].strftime(DATE_FORMAT)} - {summary['date_range'][1].strftime(DATE_FORMAT)}")
        print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {summary['unique_consumers']}")
        print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {summary['unique_suppliers']}")
        print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {summary['unique_items']}")
        print(f"   –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${summary['total_profit']:,.2f}")
        print(f"   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ${summary['avg_sell_price']:.2f}")
        print(f"   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏: ${summary['avg_buy_price']:.2f}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
        print(f"\nüìÖ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é...")
        weekly_data = loader.get_weekly_data(weeks_back=1)
        
        if weekly_data.empty:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é!")
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        print(f"üìö –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ {LOOKBACK_WEEKS} –Ω–µ–¥–µ–ª—å...")
        historical_data = loader.get_historical_data(weeks_back=LOOKBACK_WEEKS)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        print(f"\nüéØ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...")
        recommendations = algorithm.generate_recommendations(weekly_data, historical_data)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º
        stats = algorithm.get_summary_stats()
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô:")
        print(f"   –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {stats['total_items']}")
        print(f"   –í–∫–ª—é—á–∏—Ç—å: {stats['enabled_items']}")
        print(f"   –û—Ç–∫–ª—é—á–∏—Ç—å: {stats['disabled_items']}")
        print(f"   –°—Ä–µ–¥–Ω—è—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ü–µ–Ω–∞: ${stats['avg_recommended_price']}")
        print(f"   –°—Ä–µ–¥–Ω—è—è —Ü–µ–ª–µ–≤–∞—è –º–∞—Ä–∂–∞: {stats['avg_target_margin']:.1%}")
        print(f"   –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${stats['total_profit']:,.2f}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file = os.path.join(OUTPUT_FOLDER, f"weekly_pricing_recos_{timestamp}.csv")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        final_report = recommendations.copy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        if 'consumer_id' in final_report.columns:
            # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ ID -> –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
            consumer_mapping = df.groupby('consumer_id')['consumerName'].first().to_dict()
            final_report['consumer_name'] = final_report['consumer_id'].map(consumer_mapping)
        
        # –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        columns_order = [
            'consumer_id', 'consumer_name', 'item_id', 'enabled', 'price_rec',
            'baseline_cost', 'target_margin', 'reason', 'reqs', 'sales',
            'reqs_hist', 'sales_hist', 'conversion_rate', 'conversion_rate_hist', 'profit'
        ]
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        existing_columns = [col for col in columns_order if col in final_report.columns]
        final_report = final_report[existing_columns]
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        final_report.to_csv(output_file, index=False, encoding='utf-8')
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_file}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        backup_file = os.path.join(BACKUP_FOLDER, f"backup_{timestamp}.csv")
        final_report.to_csv(backup_file, index=False, encoding='utf-8')
        print(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        print(f"\nüèÜ –¢–û–ü-5 –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô:")
        top_recommendations = final_report[final_report['enabled'] == True].nlargest(5, 'price_rec')
        for _, row in top_recommendations.iterrows():
            consumer_name = row.get('consumer_name', f"Client_{row['consumer_id']}")
            print(f"   {consumer_name} | {row['item_id']} | ${row['price_rec']} | {row['target_margin']:.1%} –º–∞—Ä–∂–∞")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        disabled_items = final_report[final_report['enabled'] == False]
        if not disabled_items.empty:
            print(f"\n‚ùå –¢–û–í–ê–†–´ –î–õ–Ø –û–¢–ö–õ–Æ–ß–ï–ù–ò–Ø ({len(disabled_items)} —à—Ç.):")
            for reason in disabled_items['reason'].value_counts().items():
                print(f"   {reason[0]}: {reason[1]} —Ç–æ–≤–∞—Ä–æ–≤")
        
        print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É {OUTPUT_FOLDER} –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {str(e)}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)

