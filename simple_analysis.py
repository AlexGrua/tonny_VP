"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
–†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º–∏ Python
"""

import csv
import os
from datetime import datetime, timedelta
from collections import defaultdict, Counter

def load_data(filename):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–∞"""
    data = []
    print(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ {filename}...")
    
    with open(filename, 'r', encoding='utf-8') as file:
        reader = csv.DictReader(file)
        for row in reader:
            data.append(row)
    
    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} —Å—Ç—Ä–æ–∫")
    return data

def analyze_data(data):
    """–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
    print("\n–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ...")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω—ã–º
    total_rows = len(data)
    unique_consumers = len(set(row.get('consumerName', '') for row in data))
    unique_suppliers = len(set(row.get('producerName', '') for row in data))
    unique_countries = len(set(row.get('countryName', '') for row in data))
    unique_services = len(set(row.get('webserviceName', '') for row in data))
    
    # –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω
    sell_prices = []
    buy_prices = []
    profits = []
    
    for row in data:
        try:
            sell_price = float(row.get('consumerAmount', 0))
            buy_price = float(row.get('producerAmount', 0))
            profit = float(row.get('Profit', 0))
            
            if sell_price > 0:
                sell_prices.append(sell_price)
            if buy_price > 0:
                buy_prices.append(buy_price)
            if profit != 0:
                profits.append(profit)
        except (ValueError, TypeError):
            continue
    
    # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    avg_sell_price = sum(sell_prices) / len(sell_prices) if sell_prices else 0
    avg_buy_price = sum(buy_prices) / len(buy_prices) if buy_prices else 0
    total_profit = sum(profits)
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–æ–≤–∞—Ä–∞–º (—Å—Ç—Ä–∞–Ω–∞ + —Å–µ—Ä–≤–∏—Å)
    item_stats = defaultdict(lambda: {
        'requests': 0,
        'sales': 0,
        'total_profit': 0,
        'sell_prices': [],
        'buy_prices': []
    })
    
    for row in data:
        country = row.get('countryName', '').strip().upper()
        service = row.get('webserviceName', '').strip().upper()
        item_id = f"{country} | {service}"
        
        try:
            sell_price = float(row.get('consumerAmount', 0))
            buy_price = float(row.get('producerAmount', 0))
            quantity = int(row.get('all_orders', 0))
            profit = float(row.get('Profit', 0))
            
            item_stats[item_id]['requests'] += 1
            item_stats[item_id]['sales'] += quantity
            item_stats[item_id]['total_profit'] += profit
            
            if sell_price > 0:
                item_stats[item_id]['sell_prices'].append(sell_price)
            if buy_price > 0:
                item_stats[item_id]['buy_prices'].append(buy_price)
                
        except (ValueError, TypeError):
            continue
    
    return {
        'total_rows': total_rows,
        'unique_consumers': unique_consumers,
        'unique_suppliers': unique_suppliers,
        'unique_countries': unique_countries,
        'unique_services': unique_services,
        'avg_sell_price': avg_sell_price,
        'avg_buy_price': avg_buy_price,
        'total_profit': total_profit,
        'item_stats': dict(item_stats)
    }

def generate_recommendations(stats):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    print("\n–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...")
    
    recommendations = []
    
    for item_id, item_data in stats['item_stats'].items():
        if not item_data['sell_prices'] or not item_data['buy_prices']:
            continue
            
        # –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏ –∏ –∑–∞–∫—É–ø–∫–∏
        avg_sell = sum(item_data['sell_prices']) / len(item_data['sell_prices'])
        avg_buy = sum(item_data['buy_prices']) / len(item_data['buy_prices'])
        
        # –†–∞—Å—á–µ—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
        conversion_rate = item_data['sales'] / max(item_data['requests'], 1)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Ü–µ–Ω—ã (–±–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞)
        if conversion_rate > 0.1:  # –í—ã—Å–æ–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è
            recommended_price = avg_buy * 1.25  # 25% –º–∞—Ä–∂–∞
            enabled = True
            reason = "high_conversion"
        elif conversion_rate > 0.05:  # –°—Ä–µ–¥–Ω—è—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è
            recommended_price = avg_buy * 1.15  # 15% –º–∞—Ä–∂–∞
            enabled = True
            reason = "medium_conversion"
        elif item_data['requests'] > 10:  # –ï—Å—Ç—å —Å–ø—Ä–æ—Å, –Ω–æ –Ω–∏–∑–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è
            recommended_price = avg_buy * 1.05  # 5% –º–∞—Ä–∂–∞
            enabled = True
            reason = "low_conversion_high_demand"
        else:  # –ù–µ—Ç —Å–ø—Ä–æ—Å–∞
            recommended_price = 0
            enabled = False
            reason = "no_demand"
        
        recommendations.append({
            'item_id': item_id,
            'enabled': enabled,
            'recommended_price': round(recommended_price, 4),
            'avg_buy_price': round(avg_buy, 4),
            'avg_sell_price': round(avg_sell, 4),
            'conversion_rate': round(conversion_rate, 4),
            'requests': item_data['requests'],
            'sales': item_data['sales'],
            'total_profit': round(item_data['total_profit'], 2),
            'reason': reason
        })
    
    return recommendations

def save_results(stats, recommendations):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É output –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not os.path.exists('output'):
        os.makedirs('output')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    output_file = f'output/simple_recommendations_{timestamp}.csv'
    with open(output_file, 'w', newline='', encoding='utf-8') as file:
        if recommendations:
            writer = csv.DictWriter(file, fieldnames=recommendations[0].keys())
            writer.writeheader()
            writer.writerows(recommendations)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report_file = f'output/simple_report_{timestamp}.txt'
    with open(report_file, 'w', encoding='utf-8') as file:
        file.write("–û–¢–ß–ï–¢ –ü–û –ê–ù–ê–õ–ò–ó–£ –ê–†–ë–ò–¢–†–ê–ñ–ê\n")
        file.write("=" * 50 + "\n\n")
        
        file.write(f"–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
        
        file.write("–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n")
        file.write(f"  –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {stats['total_rows']:,}\n")
        file.write(f"  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {stats['unique_consumers']}\n")
        file.write(f"  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {stats['unique_suppliers']}\n")
        file.write(f"  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω: {stats['unique_countries']}\n")
        file.write(f"  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: {stats['unique_services']}\n")
        file.write(f"  –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ${stats['avg_sell_price']:.4f}\n")
        file.write(f"  –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏: ${stats['avg_buy_price']:.4f}\n")
        file.write(f"  –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${stats['total_profit']:,.2f}\n\n")
        
        file.write("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n")
        enabled_count = sum(1 for r in recommendations if r['enabled'])
        disabled_count = len(recommendations) - enabled_count
        
        file.write(f"  –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(recommendations)}\n")
        file.write(f"  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–∫–ª—é—á–∏—Ç—å: {enabled_count}\n")
        file.write(f"  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç–∫–ª—é—á–∏—Ç—å: {disabled_count}\n\n")
        
        # –¢–æ–ø-10 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –ø—Ä–∏–±—ã–ª–∏
        top_items = sorted(recommendations, key=lambda x: x['total_profit'], reverse=True)[:10]
        file.write("–¢–û–ü-10 –¢–û–í–ê–†–û–í –ü–û –ü–†–ò–ë–´–õ–ò:\n")
        for i, item in enumerate(top_items, 1):
            file.write(f"  {i:2d}. {item['item_id']} | ${item['recommended_price']:.4f} | ${item['total_profit']:.2f}\n")
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
    print(f"  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {output_file}")
    print(f"  –û—Ç—á–µ—Ç: {report_file}")
    
    return output_file, report_file

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 60)
    print("–£–ü–†–û–©–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –ê–†–ë–ò–¢–†–ê–ñ–ê")
    print("=" * 60)
    
    # –ü–æ–∏—Å–∫ CSV —Ñ–∞–π–ª–æ–≤
    csv_files = [f for f in os.listdir('data') if f.endswith('.csv')]
    if not csv_files:
        print("‚ùå –í –ø–∞–ø–∫–µ data/ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ CSV —Ñ–∞–π–ª–æ–≤!")
        return
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {csv_files[0]}")
    
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        data = load_data(os.path.join('data', csv_files[0]))
        
        # –ê–Ω–∞–ª–∏–∑
        stats = analyze_data(data)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        recommendations = generate_recommendations(stats)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        save_results(stats, recommendations)
        
        # –í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏
        print(f"\nüìä –°–í–û–î–ö–ê:")
        print(f"  –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {stats['total_rows']:,}")
        print(f"  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {stats['unique_consumers']}")
        print(f"  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {len(stats['item_stats'])}")
        print(f"  –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${stats['total_profit']:,.2f}")
        
        enabled_count = sum(1 for r in recommendations if r['enabled'])
        print(f"  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–∫–ª—é—á–∏—Ç—å: {enabled_count}")
        print(f"  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç–∫–ª—é—á–∏—Ç—å: {len(recommendations) - enabled_count}")
        
        print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()