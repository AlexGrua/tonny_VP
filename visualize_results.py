"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os
from datetime import datetime

def visualize_pricing_results(csv_file=None):
    """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è"""
    
    # –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–∞–π–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if csv_file is None:
        output_files = [f for f in os.listdir('output') if f.startswith('weekly_pricing_recos_') and f.endswith('.csv')]
        if not output_files:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ output/")
            return
        
        csv_file = os.path.join('output', sorted(output_files)[-1])
    
    print(f"üìä –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ {csv_file}")
    df = pd.read_csv(csv_file)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
    plt.style.use('default')
    sns.set_palette("husl")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
    fig, axes = plt.subplots(2, 3, figsize=(18, 12))
    fig.suptitle('–ê–Ω–∞–ª–∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é', fontsize=16, fontweight='bold')
    
    # 1. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —Ü–µ–Ω
    enabled_data = df[df['enabled'] == True]
    if not enabled_data.empty:
        axes[0, 0].hist(enabled_data['price_rec'], bins=30, alpha=0.7, color='skyblue', edgecolor='black')
        axes[0, 0].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —Ü–µ–Ω')
        axes[0, 0].set_xlabel('–¶–µ–Ω–∞ ($)')
        axes[0, 0].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        axes[0, 0].grid(True, alpha=0.3)
    
    # 2. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞—Ä–∂–∏
    if not enabled_data.empty:
        axes[0, 1].hist(enabled_data['target_margin'] * 100, bins=30, alpha=0.7, color='lightgreen', edgecolor='black')
        axes[0, 1].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –º–∞—Ä–∂–∏')
        axes[0, 1].set_xlabel('–ú–∞—Ä–∂–∞ (%)')
        axes[0, 1].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        axes[0, 1].grid(True, alpha=0.3)
    
    # 3. –°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–æ–≤ (–≤–∫–ª—é—á–µ–Ω–æ/–æ—Ç–∫–ª—é—á–µ–Ω–æ)
    status_counts = df['enabled'].value_counts()
    colors = ['lightcoral', 'lightgreen']
    axes[0, 2].pie(status_counts.values, labels=['–û—Ç–∫–ª—é—á–µ–Ω–æ', '–í–∫–ª—é—á–µ–Ω–æ'], 
                   autopct='%1.1f%%', colors=colors, startangle=90)
    axes[0, 2].set_title('–°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–æ–≤')
    
    # 4. –ö–æ–Ω–≤–µ—Ä—Å–∏—è vs –¶–µ–Ω–∞
    if not enabled_data.empty:
        scatter = axes[1, 0].scatter(enabled_data['conversion_rate'] * 100, 
                                   enabled_data['price_rec'], 
                                   c=enabled_data['target_margin'] * 100, 
                                   cmap='viridis', alpha=0.6)
        axes[1, 0].set_title('–ö–æ–Ω–≤–µ—Ä—Å–∏—è vs –¶–µ–Ω–∞')
        axes[1, 0].set_xlabel('–ö–æ–Ω–≤–µ—Ä—Å–∏—è (%)')
        axes[1, 0].set_ylabel('–¶–µ–Ω–∞ ($)')
        axes[1, 0].grid(True, alpha=0.3)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —à–∫–∞–ª—É
        cbar = plt.colorbar(scatter, ax=axes[1, 0])
        cbar.set_label('–ú–∞—Ä–∂–∞ (%)')
    
    # 5. –¢–æ–ø-10 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ü–µ–Ω–µ
    if not enabled_data.empty:
        top_items = enabled_data.nlargest(10, 'price_rec')
        axes[1, 1].barh(range(len(top_items)), top_items['price_rec'], color='orange', alpha=0.7)
        axes[1, 1].set_title('–¢–æ–ø-10 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ü–µ–Ω–µ')
        axes[1, 1].set_xlabel('–¶–µ–Ω–∞ ($)')
        axes[1, 1].set_yticks(range(len(top_items)))
        axes[1, 1].set_yticklabels([f"{row['item_id'][:20]}..." for _, row in top_items.iterrows()], fontsize=8)
        axes[1, 1].grid(True, alpha=0.3)
    
    # 6. –ü—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
    disabled_data = df[df['enabled'] == False]
    if not disabled_data.empty:
        reason_counts = disabled_data['reason'].value_counts()
        axes[1, 2].bar(range(len(reason_counts)), reason_counts.values, color='lightcoral', alpha=0.7)
        axes[1, 2].set_title('–ü—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤')
        axes[1, 2].set_xlabel('–ü—Ä–∏—á–∏–Ω–∞')
        axes[1, 2].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        axes[1, 2].set_xticks(range(len(reason_counts)))
        axes[1, 2].set_xticklabels(reason_counts.index, rotation=45, ha='right', fontsize=8)
        axes[1, 2].grid(True, alpha=0.3)
    
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_file = os.path.join('output', f'pricing_analysis_{timestamp}.png')
    plt.savefig(output_file, dpi=300, bbox_inches='tight')
    print(f"üìä –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    plt.show()
    
    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"\nüìà –°–í–û–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(df)}")
    print(f"   –í–∫–ª—é—á–µ–Ω–æ: {len(enabled_data)} ({len(enabled_data)/len(df)*100:.1f}%)")
    print(f"   –û—Ç–∫–ª—é—á–µ–Ω–æ: {len(disabled_data)} ({len(disabled_data)/len(df)*100:.1f}%)")
    
    if not enabled_data.empty:
        print(f"   –°—Ä–µ–¥–Ω—è—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ü–µ–Ω–∞: ${enabled_data['price_rec'].mean():.4f}")
        print(f"   –ú–µ–¥–∏–∞–Ω–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ü–µ–Ω–∞: ${enabled_data['price_rec'].median():.4f}")
        print(f"   –°—Ä–µ–¥–Ω—è—è –º–∞—Ä–∂–∞: {enabled_data['target_margin'].mean()*100:.1f}%")
        print(f"   –ú–µ–¥–∏–∞–Ω–Ω–∞—è –º–∞—Ä–∂–∞: {enabled_data['target_margin'].median()*100:.1f}%")
        print(f"   –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${enabled_data['profit'].sum():,.2f}")

def create_summary_report(csv_file=None):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    
    # –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–∞–π–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if csv_file is None:
        output_files = [f for f in os.listdir('output') if f.startswith('weekly_pricing_recos_') and f.endswith('.csv')]
        if not output_files:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ output/")
            return
        
        csv_file = os.path.join('output', sorted(output_files)[-1])
    
    df = pd.read_csv(csv_file)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    report_file = os.path.join('output', f'summary_report_{timestamp}.txt')
    
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write("–û–¢–ß–ï–¢ –ü–û –ê–ù–ê–õ–ò–ó–£ –¶–ï–ù–û–û–ë–†–ê–ó–û–í–ê–ù–ò–Ø\n")
        f.write("=" * 50 + "\n\n")
        
        f.write(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {csv_file}\n\n")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        enabled_data = df[df['enabled'] == True]
        disabled_data = df[df['enabled'] == False]
        
        f.write("–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n")
        f.write(f"  –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(df)}\n")
        f.write(f"  –í–∫–ª—é—á–µ–Ω–æ: {len(enabled_data)} ({len(enabled_data)/len(df)*100:.1f}%)\n")
        f.write(f"  –û—Ç–∫–ª—é—á–µ–Ω–æ: {len(disabled_data)} ({len(disabled_data)/len(df)*100:.1f}%)\n\n")
        
        if not enabled_data.empty:
            f.write("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–ö–õ–Æ–ß–ï–ù–ù–´–ú –¢–û–í–ê–†–ê–ú:\n")
            f.write(f"  –°—Ä–µ–¥–Ω—è—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ü–µ–Ω–∞: ${enabled_data['price_rec'].mean():.4f}\n")
            f.write(f"  –ú–µ–¥–∏–∞–Ω–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ü–µ–Ω–∞: ${enabled_data['price_rec'].median():.4f}\n")
            f.write(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${enabled_data['price_rec'].min():.4f}\n")
            f.write(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${enabled_data['price_rec'].max():.4f}\n")
            f.write(f"  –°—Ä–µ–¥–Ω—è—è –º–∞—Ä–∂–∞: {enabled_data['target_margin'].mean()*100:.1f}%\n")
            f.write(f"  –ú–µ–¥–∏–∞–Ω–Ω–∞—è –º–∞—Ä–∂–∞: {enabled_data['target_margin'].median()*100:.1f}%\n")
            f.write(f"  –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${enabled_data['profit'].sum():,.2f}\n\n")
        
        # –ü—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        if not disabled_data.empty:
            f.write("–ü–†–ò–ß–ò–ù–´ –û–¢–ö–õ–Æ–ß–ï–ù–ò–Ø –¢–û–í–ê–†–û–í:\n")
            reason_counts = disabled_data['reason'].value_counts()
            for reason, count in reason_counts.items():
                f.write(f"  {reason}: {count} —Ç–æ–≤–∞—Ä–æ–≤\n")
            f.write("\n")
        
        # –¢–æ–ø —Ç–æ–≤–∞—Ä—ã
        if not enabled_data.empty:
            f.write("–¢–û–ü-10 –¢–û–í–ê–†–û–í –ü–û –¶–ï–ù–ï:\n")
            top_items = enabled_data.nlargest(10, 'price_rec')
            for i, (_, row) in enumerate(top_items.iterrows(), 1):
                consumer_name = row.get('consumer_name', f"Client_{row['consumer_id']}")
                f.write(f"  {i:2d}. {consumer_name} | {row['item_id']} | ${row['price_rec']:.4f} | {row['target_margin']*100:.1f}%\n")
    
    print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ output
    if not os.path.exists('output'):
        print("‚ùå –ü–∞–ø–∫–∞ output/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ weekly_pricing.py")
        exit(1)
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    visualize_pricing_results()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    create_summary_report()

