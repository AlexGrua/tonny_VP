"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–º–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import os

def create_sample_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    num_days = 60  # 2 –º–µ—Å—è—Ü–∞ –¥–∞–Ω–Ω—ã—Ö
    num_consumers = 20
    num_suppliers = 10
    num_countries = 5
    num_services = 8
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    countries = ['USA', 'UK', 'DE', 'FR', 'CA']
    services = ['SMS', 'EMAIL', 'WHATSAPP', 'TELEGRAM', 'VIBER', 'SIGNAL', 'DISCORD', 'SLACK']
    consumers = [f'Consumer_{i:02d}' for i in range(1, num_consumers + 1)]
    suppliers = [f'Supplier_{i:02d}' for i in range(1, num_suppliers + 1)]
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞—Ç
    start_date = datetime.now() - timedelta(days=num_days)
    dates = [start_date + timedelta(days=i) for i in range(num_days)]
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    transactions = []
    
    for date in dates:
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –¥–µ–Ω—å (—Å–ª—É—á–∞–π–Ω–æ–µ)
        daily_transactions = np.random.poisson(50)
        
        for _ in range(daily_transactions):
            # –°–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            country = np.random.choice(countries)
            service = np.random.choice(services)
            consumer = np.random.choice(consumers)
            supplier = np.random.choice(suppliers)
            
            # –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã (–∑–∞–∫—É–ø–∫–∞ –∏ –ø—Ä–æ–¥–∞–∂–∞)
            base_buy_price = np.random.uniform(0.01, 0.10)  # $0.01 - $0.10
            margin = np.random.uniform(0.10, 0.40)  # 10% - 40% –º–∞—Ä–∂–∞
            sell_price = base_buy_price * (1 + margin)
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            quantity = np.random.poisson(5) + 1  # 1-20 —à—Ç—É–∫
            
            # –ü—Ä–∏–±—ã–ª—å
            profit = (sell_price - base_buy_price) * quantity
            
            transaction = {
                'dates': date,
                'consumerName': consumer,
                'producerName': supplier,
                'countryName': country,
                'webserviceName': service,
                'consumerAmount': round(sell_price, 4),
                'producerAmount': round(base_buy_price, 4),
                'all_orders': quantity,
                'Profit': round(profit, 4)
            }
            
            transactions.append(transaction)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame
    df = pd.DataFrame(transactions)
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ
    df = df.sort_values('dates').reset_index(drop=True)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    output_file = os.path.join('data', 'sample_arbitration_data.csv')
    df.to_csv(output_file, index=False)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Å –ø—Ä–∏–º–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {output_file}")
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(df):,}")
    print(f"   –ü–µ—Ä–∏–æ–¥: {df['dates'].min().strftime('%Y-%m-%d')} - {df['dates'].max().strftime('%Y-%m-%d')}")
    print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {df['consumerName'].nunique()}")
    print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {df['producerName'].nunique()}")
    print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {df['countryName'].nunique() * df['webserviceName'].nunique()}")
    print(f"   –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${df['Profit'].sum():,.2f}")
    print(f"   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ${df['consumerAmount'].mean():.4f}")
    print(f"   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏: ${df['producerAmount'].mean():.4f}")
    
    return df

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not os.path.exists('data'):
        os.makedirs('data')
    
    create_sample_data()

